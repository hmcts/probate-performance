plugins {
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'scala'
    id 'java-library'
    id 'io.gatling.gradle' version '3.14.3'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(Copy).all{
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    mavenCentral()
}

dependencies {
    gatlingImplementation project(':common-performance')
}

dependencyCheck {
    suppressionFile = "common/common-performance/owasp/owasp-suppressions.xml"
    analyzers.assemblyEnabled = false
}

tasks.register("runSimulation", JavaExec) {
    group = "Gatling Test"
    description = "Runs a specified Gatling simulation without interactive mode"

    classpath = sourceSets.gatling.runtimeClasspath
    mainClass.set("io.gatling.app.Gatling")

    // Add simulation class and results directory
    args += [
            "-s", "simulations.Probate_Simulation", // <---- SPECIFY YOUR SIMULATION HERE
            "-rf", layout.buildDirectory.get().asFile.toString() + "/reports/gatling"
    ]

    // JVM args required for Java 21
    jvmArgs += ["--add-opens=java.base/java.lang=ALL-UNNAMED"]

    // Pass through all -D properties from command line
    jvmArgs += System.properties.findAll { key, _ ->
        key instanceof String && key.startsWith("-D") == false && key != "java.class.path"
    }.collect { key, value ->
        "-D${key}=${value}"
    }
}

// Override gatlingRun task
tasks.named("gatlingRun") {
    dependsOn("runSimulation")
    enabled = false
}

gatling {
    gatlingVersion = '3.14.3'
    scalaVersion = '2.13.11'
}

sourceSets {
    gatling {
        scala {
            srcDir 'src/gatling/simulations'
        }
        resources {
            srcDir 'src/gatling/resources'
        }
    }
}

configurations {
    gatlingImplementation.extendsFrom implementation
    gatlingRuntimeOnly.extendsFrom runtimeOnly
}

/* Generate stats per transaction for use in Jenkins*/
ext {
    transactionNamesToGraph = ["Probate_390_DeclarationSubmit", "Probate_440_ExecTwoDeclarationSubmit", "Probate_600_LoadCitizenHub"] // set the transactions to graph here
}

tasks.register('generateStats', JavaExec) {
    dependsOn tasks.named('gatlingRun')
    dependsOn tasks.named('compileGatlingScala')
    mainClass.set('stats.GenerateStatsByTxn')
    args = transactionNamesToGraph
    classpath = sourceSets.gatling.runtimeClasspath + project(":common-performance").sourceSets.main.runtimeClasspath
}

// Ensure it runs after Gatling
tasks.named('gatlingRun') {
    finalizedBy tasks.named('generateStats')
}